{"id":"node_modules/calidators/dist/isRegexMatch.js","dependencies":[{"name":"/home/bigeyestoad/Documents/gitRepos/challenges/validationLibrary/package.json","includedInParent":true,"mtime":1609100606140},{"name":"/home/bigeyestoad/Documents/gitRepos/challenges/validationLibrary/node_modules/calidators/package.json","includedInParent":true,"mtime":1609097451850},{"name":"./utilities","loc":{"line":5,"column":33},"parent":"/home/bigeyestoad/Documents/gitRepos/challenges/validationLibrary/node_modules/calidators/dist/isRegexMatch.js","resolved":"/home/bigeyestoad/Documents/gitRepos/challenges/validationLibrary/node_modules/calidators/dist/utilities.js"}],"generated":{"js":"var define;\nvar global = arguments[3];\n(function (global, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define(['exports', './utilities'], factory);\n    } else if (typeof exports !== \"undefined\") {\n        factory(exports, require('./utilities'));\n    } else {\n        var mod = {\n            exports: {}\n        };\n        factory(mod.exports, global.utilities);\n        global.isRegexMatch = mod.exports;\n    }\n})(this, function (exports, _utilities) {\n    'use strict';\n\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n\n    exports.default = function (config) {\n        return function (value) {\n            if ((0, _utilities.isString)(value)) {\n                return !config.regex.test(value) ? config.message : null;\n            }\n\n            return (0, _utilities.isInvalidType)(value, [_utilities.Types.string]);\n        };\n    };\n});"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/calidators/dist/isRegexMatch.js","original":{"line":1,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/calidators/dist/isRegexMatch.js","original":{"line":2,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/calidators/dist/isRegexMatch.js","original":{"line":3,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/calidators/dist/isRegexMatch.js","original":{"line":4,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/calidators/dist/isRegexMatch.js","original":{"line":5,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/calidators/dist/isRegexMatch.js","original":{"line":6,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/calidators/dist/isRegexMatch.js","original":{"line":7,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/calidators/dist/isRegexMatch.js","original":{"line":8,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/calidators/dist/isRegexMatch.js","original":{"line":9,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/calidators/dist/isRegexMatch.js","original":{"line":10,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/calidators/dist/isRegexMatch.js","original":{"line":11,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/calidators/dist/isRegexMatch.js","original":{"line":12,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/calidators/dist/isRegexMatch.js","original":{"line":13,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/calidators/dist/isRegexMatch.js","original":{"line":14,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/calidators/dist/isRegexMatch.js","original":{"line":15,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/calidators/dist/isRegexMatch.js","original":{"line":16,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/calidators/dist/isRegexMatch.js","original":{"line":17,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/calidators/dist/isRegexMatch.js","original":{"line":18,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/calidators/dist/isRegexMatch.js","original":{"line":19,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/calidators/dist/isRegexMatch.js","original":{"line":20,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/calidators/dist/isRegexMatch.js","original":{"line":21,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/calidators/dist/isRegexMatch.js","original":{"line":22,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/calidators/dist/isRegexMatch.js","original":{"line":23,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/calidators/dist/isRegexMatch.js","original":{"line":24,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/calidators/dist/isRegexMatch.js","original":{"line":25,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/calidators/dist/isRegexMatch.js","original":{"line":26,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/calidators/dist/isRegexMatch.js","original":{"line":27,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/calidators/dist/isRegexMatch.js","original":{"line":28,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/calidators/dist/isRegexMatch.js","original":{"line":29,"column":0},"generated":{"line":31,"column":0}}],"sources":{"node_modules/calidators/dist/isRegexMatch.js":"(function (global, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define(['exports', './utilities'], factory);\n    } else if (typeof exports !== \"undefined\") {\n        factory(exports, require('./utilities'));\n    } else {\n        var mod = {\n            exports: {}\n        };\n        factory(mod.exports, global.utilities);\n        global.isRegexMatch = mod.exports;\n    }\n})(this, function (exports, _utilities) {\n    'use strict';\n\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n\n    exports.default = function (config) {\n        return function (value) {\n            if ((0, _utilities.isString)(value)) {\n                return !config.regex.test(value) ? config.message : null;\n            }\n\n            return (0, _utilities.isInvalidType)(value, [_utilities.Types.string]);\n        };\n    };\n});"},"lineCount":31}},"error":null,"hash":"a320415f8d1e66ade02ef6f5127099e7","cacheData":{"env":{}}}